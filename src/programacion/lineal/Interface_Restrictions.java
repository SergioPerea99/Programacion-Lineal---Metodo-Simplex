/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package programacion.lineal;

import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class Interface_Restrictions extends javax.swing.JFrame {
    
    Interface_Main interfaz_principal;
    ArrayList<ArrayList<Double>> matriz_valores_restricciones; //NºFilas = Nº de restricciones; NºColumnas = Nº de variables.
    Boolean paso1, paso2;
    Integer variable_entrante, variable_saliente;
    String[] v_restricciones;
    Boolean parametros_mostrados;
    /**
     * Creates new form Interface_Restrictions
     */
    public Interface_Restrictions() {
        initComponents();
    }
    
    public void setRestricciones(Interface_Main i){
        interfaz_principal = i;
        matriz_valores_restricciones = new ArrayList<>();
        for (int f = 0; f < interfaz_principal.get_NumRestricciones(); f++) {
            matriz_valores_restricciones.add(f, new ArrayList<>());
            for (int c = 0; c < interfaz_principal.get_NumVarDecision(); c++) {
                matriz_valores_restricciones.get(f).add(c, 0.0);
            }
        }
        paso1 = paso2 = parametros_mostrados = false;
        v_restricciones = new String[interfaz_principal.get_NumRestricciones()];
        
    }
    
    public void rellenaRestricciones(){
        //TODO: AÑADIR UNA TABLA DE FORMA QUE SE PUEDA AÑADIR LAS RESTRICCIONES SIN PROBLEMAS
        // - USAR LA TABLA PARA PONER EN LOS HUECOS EL VALOR DE LA Xi e INDICAR EL <= (YA PUESTO) Y A LA DERECHA OTRO HUECO PA QUE PONGAN EL VALOR.
        generarMatriz();
    }
    
    public String[] obtenerRestricciones(){
        String cadena;
        for (int f = 0; f < jTable1.getRowCount()-1; f++) {
            cadena = "";
            for (int c = 3; c < 3+interfaz_principal.get_NumVarDecision(); c++) {
                cadena += "("+jTable1.getValueAt(f, c).toString()+")"+jTable1.getColumnName(c);
                if (c < 3+interfaz_principal.get_NumVarDecision()-1)
                    cadena += " + ";
                else{
                    cadena += " <= "+jTable1.getValueAt(f, 2);
                }
            }
            v_restricciones[f] = cadena;
        }
        return v_restricciones;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("PASO A PASO");
        jButton1.setActionCommand("SIGUIENTE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("PROCESO COMPLETO");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //TODO: RECOGER LOS VALORES QUE EL USER METE PARA LAS RESTRICCIONES --> EMPEZAR EL PROCESO DE OPTIMIZACIÓN.
        //IDEA: IR ACTUALIZANDO EL JTABLE CONFORME SE VAN HACIENDO LOS CAMBIOS DE OPTIMIZACIÓN QUE EL ALGORITMO VAYA DECIDIENDO (PUEDE QUEDAR BIEN) --> EJECUTANDO PASO A PASO PODRÍA FUNCIONAR
        if (!parametros_mostrados){
            interfaz_principal.mostrarParametros();
            parametros_mostrados = true;
        }
        if (!paso1){  //Paso 1 --> encontrar la variable saliente y entrante.
            jButton2.setVisible(false);
            jTable1.setVisible(false);
            variable_entrante = eleccion_variable_entrante(); //Devuelve la posición de la variable de menor valor (si no existe variable negativa devolverá -1).
            int var_saliente;
            if (variable_entrante != -1){
                variable_saliente = eleccion_variable_saliente();
            jTable1.setVisible(true);
            paso1 = true; //Paso realizado.
            paso2 = false; //Activa en la siguiente vez que se pulsa el paso 2.
            }else{
                interfaz_principal.mostrarSolucion();
                interfaz_principal.setVisible(true);
                dispose();
            }
            
        }
        else if (!paso2){ //Paso 2 --> modificaciones en la fila y columna que cruza respecto a la variable de entrada y salida.
            jTable1.setVisible(false);
            rebuild_pivot();
            jTable1.setVisible(true);
            paso2 = true; //Paso realizado;
            paso1 = false; //Activa en la siguiente vez que se pulsa el paso 3.
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        boolean fin = false;
        
        interfaz_principal.mostrarParametros();

        
        while (!fin){
            variable_entrante = eleccion_variable_entrante();
            if (variable_entrante != -1){
                    variable_saliente = eleccion_variable_saliente();
                    rebuild_pivot();
            }else{
                    fin = true; //Finaliza el proceso de optimización
                    interfaz_principal.mostrarSolucion();
                    interfaz_principal.setVisible(true);
                    dispose();
            }
            
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface_Restrictions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface_Restrictions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface_Restrictions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface_Restrictions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface_Restrictions().setVisible(true);
            }
        });
    }

    
    private void generarMatriz(){
        DefaultTableModel tabla_auxiliar = new DefaultTableModel();
            
            tabla_auxiliar.addColumn("coef de Z (Cj)");
            tabla_auxiliar.addColumn("V.B.");
            tabla_auxiliar.addColumn("b");
            for (int i = 0; i < interfaz_principal.get_NumRestricciones()*2; i++) //TODO: COMPROBAR SI ES CORRECTO QUE SEA SEGÚN EL NºRESTRICCIONE O SI ES SEGÚN EL NºVARIABLES
                tabla_auxiliar.addColumn("x"+(i+1));
            tabla_auxiliar.addColumn("b/a (a >= 0)");
            
            for (int i = 0; i < interfaz_principal.get_NumRestricciones()+1; i++) {
                tabla_auxiliar.addRow(new Object[tabla_auxiliar.getColumnCount()]);
                if (i < interfaz_principal.get_NumRestricciones()){
                    tabla_auxiliar.setValueAt(0.0, i, 0);
                    tabla_auxiliar.setValueAt("x"+(i+interfaz_principal.get_NumRestricciones()+1), i, 1);
                }else{
                    tabla_auxiliar.setValueAt("Zj - Cj", i, 1);
                    int cont = 0;
                    for(int c = 2; c < tabla_auxiliar.getColumnCount()-1; c++){
                        if(c < 3 || c >= interfaz_principal.get_NumVarDecision()+3)
                            tabla_auxiliar.setValueAt(0, i, c); 
                        else
                            tabla_auxiliar.setValueAt("-"+interfaz_principal.get_Var_Decision().get(cont++), i, c);
                        
                    }
                    
                }
                    
            }
            
            jTable1.setModel(tabla_auxiliar);
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * @brief Variable entrante
     * @post Elige la posición de la columna que corresponde con la variable que menor valor tiene en la fila correspondiente al Zj - Cj
     * @return Posición de la variable o -1 si no encuentra ningun valor negativo.
     */
    private int eleccion_variable_entrante() {
        int columna_elegida = -1;
        double menor_valor = Double.MAX_VALUE;
        for (int c = 3; c < jTable1.getColumnCount()-1; c++) { //Recorre las variables...
            String s = jTable1.getValueAt(jTable1.getRowCount()-1, c).toString();
            System.out.println(s);
            Double d = Double.parseDouble(s);
            System.out.println(d);
            if(d < 0 && menor_valor > d){
                menor_valor = d;
                columna_elegida = c;
            }    
        }

        return columna_elegida;
    }

    private int eleccion_variable_saliente() {
        int fila_elegida = -1;
        Double menor_valor = Double.MAX_VALUE, nominador, denominador, valor;
        
        //CALCULAR EL (Bi/Ai) Y ELEGIR EL DE MENOR VALOR.
        for (int f = 0; f < jTable1.getRowCount()-1; f++) {
            nominador = Double.parseDouble(jTable1.getValueAt(f, 2).toString());
            System.err.println(nominador);
            denominador = Double.parseDouble(jTable1.getValueAt(f, variable_entrante).toString());
            valor = nominador / denominador;
            if (valor < menor_valor){
                menor_valor = valor;
                fila_elegida = f;
            }
            jTable1.setValueAt(valor.toString(), f, jTable1.getColumnCount()-1);
        }
        
        System.out.println(fila_elegida); //ESTA DEVOLVIENDO UN -1.
        
        return fila_elegida;
    }

    private void rebuild_pivot() {
        Double valor_matriz, nuevo_valor;
        Double valor_pivote = Double.parseDouble(jTable1.getValueAt(variable_saliente, variable_entrante).toString());
        
        //Hacer el pivote = 1
        for (int c = 2; c < jTable1.getColumnCount()-1; c++) {
            valor_matriz = Double.parseDouble(jTable1.getValueAt(variable_saliente, c).toString());
            nuevo_valor = valor_matriz / valor_pivote;
            jTable1.setValueAt(nuevo_valor.toString(), variable_saliente, c);
        }
        
        //Hacer que los demás valores de la columna respecto al pivote sean 0.
        Double valor_fila_restar, valor_f_c_pivote;
        for (int f = 0; f < jTable1.getRowCount(); f++) {
            valor_fila_restar = Double.parseDouble(jTable1.getValueAt(f, variable_entrante).toString());
            if (f != variable_saliente){
                for (int c = 2; c < jTable1.getColumnCount()-1; c++) {
                    valor_f_c_pivote = Double.parseDouble(jTable1.getValueAt(variable_saliente, c).toString());
                    valor_matriz = Double.parseDouble(jTable1.getValueAt(f, c).toString());
                    nuevo_valor = valor_matriz - valor_fila_restar * valor_f_c_pivote;
                    jTable1.setValueAt(nuevo_valor.toString(), f, c);
                }
            }
        }
        
        //INTERCAMBIAR LA VARIABLE SALIENTE POR LA VARIABLE ENTRANTE EN TÉRMINOS DE NOMBRE.
        jTable1.setValueAt(jTable1.getColumnName(variable_entrante).toString(),variable_saliente, 1);
        
    }
    
    public JTable getTable(){
        return jTable1;
    }
    
    public int numFilas(){
        return jTable1.getRowCount();
    }
    
}
